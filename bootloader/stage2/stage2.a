   [bits 16]
   [org 0x10000]
   mov ax, 0x1000
   mov ds, ax
   mov es, ax
   mov fs, ax
   mov gs, ax
   mov ss, ax
   mov sp, 0x9000

   jmp start

%include "print.inc"
%include "ramdetect.inc"
%include "floppy.inc"
%include "elf.inc"
%include "a20.inc"
%include "protected.inc"
%include "../stage1/ext2.inc"

start:

   mov si, stage2_msg
   call sprint
 
   call print_newline
   
   call print_check_a20
   
   call set_a20
   
   call floppy_setup
   
   call print_newline
   
   call read_ext2_superblock
   
   mov ax, 2
   call read_ext2_inode
   mov bx, 0
find_folder_entry:
   push bx
   add bx, 4		; bx = &entry_size
   mov dx, [es:bx] 	; dx = entry_size
   push dx
   add bx, 4		; bx = entry_name
   mov si, boot_dir
   call str_eq
   cmp dx, 1
   je folder_found
   
   pop dx
   pop bx
   add bx, dx		; bx = &next_entry
   jmp find_folder_entry
folder_found:
   pop dx
   pop bx
   mov ax, [es:bx]

   call read_ext2_inode
   
   ;We should now be in the boot directory
   
   mov bx, 0

find_file_entry:
   push bx
   add bx, 4		; bx = &entry_size
   mov dx, [es:bx] 	; dx = entry_size
   push dx
   add bx, 4		; bx = entry_name
   mov si, kernel_file
   call str_eq
   cmp dx, 1
   je file_found
   
   pop dx
   pop bx
   add bx, dx		; bx = &next_entry
   jmp find_file_entry
file_found:
   pop dx
   pop bx
   mov ax, [es:bx]
   call read_ext2_inode
   
   
   mov bx, 0x0010
   mov ax, [es:bx]
   mov [reg16], ax
   call printreg16
   
   call print_newline
   
   mov ax, 0x0000
   call elf_load
   
   call detect_ram
   
   mov si, entering_protected_msg
   call sprint
   
   mov eax, [kernel_entry]
   mov [reg32], eax
   call printreg32
   call print_newline
   
   call enter_protected
   mov ax, 0x10
   mov ds, ax
   mov es, ax
   mov fs, ax
   mov gs, ax
   mov ss, ax
   xchg bx, bx
   jmp dword 0x8:0x11000 ;Jump to second stage

hang:
halt:
   jmp halt
   
load_loop:
   push ax
   push bx
   push cx
   call floppy_read
   pop cx
   pop bx
   pop ax
   
   inc ax
   add bx, 0x200
   dec cx
   jnz load_loop
   ret
   
str_eq:
		mov ah, byte [es:bx]
		inc bx
		lodsb
		cmp ah, al
		jnz str_eq_fail
		test ah, ah
		jnz str_eq
		mov dx, 1
		ret
str_eq_fail:
		mov dx, 0
		ret

stage2_msg: db "Welcome to stage 2 of this bootloader", 10, 13, 0
entering_kernel_msg: db "Jumping to kernel at: "
entering_protected_msg: db "Entering protected mode and loading kernel at", 10, 13, 0
kernel_file: db "nos.bin",0
boot_dir: db "boot",0
kernel_entry: dw 0,0
times 4096-($-$$) db 0

protected_mode_target: